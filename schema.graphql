type Query {
  app: String!
  videos(limit: Int = 10, offset: Int = 0): [Video!]!
}

type Video {
  id: Int!
  youtubeId: String!
  title: String!
  description: String!
  user: User!
}

type User {
  id: ID!
  account: String!
}

type Mutation {
  login(password: String!, account: String!): LoginOrError!
  shareVideo(id: ID!): VideoOrError!
}

union LoginOrError = AuthPayload | LoginError | Error

type AuthPayload {
  user: User!
  token: String!
}

type LoginError {
  code: LoginErrorCode!
}

enum LoginErrorCode {
  INVALID_PASSWORD
}

type Error {
  code: ErrorCode!
}

enum ErrorCode {
  INTERNAL_SERVER_ERROR
  FORBIDDEN
  NOT_FOUND
}

union VideoOrError = Video | VideoError | Error

type VideoError {
  code: VideoErrorCode!
}

enum VideoErrorCode {
  INVALID_VIDEO_ID
}
